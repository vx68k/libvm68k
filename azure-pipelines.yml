# azure-pipelines.yml - configuration for Azure Pipelines
# Copyright (C) 2020-2021 Kaz Nishimura
#
# Copying and distribution of this file, with or without modification, are
# permitted in any medium without royalty provided the copyright notice and
# this notice are preserved.  This file is offered as-is, without any warranty.
---
variables:
  package.distName: libvm68k-2-alpha.5
  uploadRepository: kazssym/libvm68k
trigger:
  - master
  - release/*
stages:
  - stage: Default
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        variables:
          - group: gpg
        steps:
          - task: DownloadSecureFile@1
            name: Keys
            inputs:
              secureFile: keys.asc
          - bash: |
              echo '$(gpg.passphrase)' |
              sh ./setupkeys.sh '$(Keys.secureFilePath)'
            displayName: Set up signing keys
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: sonarcloud
              organization: vx68k
              scannerMode: CLI
              configMode: manual
              cliProjectKey: vx68k_libvm68k
              cliSources: libvm68kapi, libvm68k
              extraProperties: |
                sonar.cfamily.build-wrapper-output=build-wrapper-output
          - bash: |
              curl -OL https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip &&
              unzip build-wrapper-linux-x86.zip
            displayName: Download SonarCloud build wrapper
            workingDirectory: $(Agent.TempDirectory)
          - bash: |
              sudo apt-get install -q --no-install-recommends \
                texinfo \
                libcppunit-dev
            displayName: Install build dependencies
          - bash: |
              autoreconf --verbose
            displayName: Bootstrap
          - bash: |
              ./configure --disable-static \
                CXX="g++ -std=c++14" \
                CFLAGS="-g -O2 -fprofile-arcs -ftest-coverage" \
                CXXFLAGS="-g -O2 -fprofile-arcs -ftest-coverage"
                status=$?
                echo "##vso[task.uploadfile]`pwd`/config.log"
                exit $status
            displayName: Configure
          - bash: |
              '$(Agent.TempDirectory)'/build-wrapper-linux-x86/build-wrapper-linux-x86-64 \
                --out-dir build-wrapper-output \
                make check
            displayName: Build
          - task: PublishTestResults@2
            condition: succeededOrFailed()
          - bash: |
              for subdir in libvm68kapi libvm68k test; do
                (cd "$subdir" && find . -name '*.gcda' -print | xargs -r gcov -r)
              done
            displayName: Produce test coverage reports
          - task: SonarCloudAnalyze@1
          - bash: |
              make dist &&
              mkdir -p _dist &&
              mv -f '$(package.distName)'.* _dist/
            displayName: Make distributables
          - publish: _dist
            artifact: dist
  - stage: Test
    jobs:
      - job: Build
        strategy:
          matrix:
            Ubuntu:
              VM_IMAGE: ubuntu-18.04
              CC: gcc
              CXX: g++
            macOS:
              VM_IMAGE: macOS-10.14
              CC: clang
              CXX: clang++ -std=c++14
        continueOnError: true
        pool:
          vmImage: $(VM_IMAGE)
        steps:
          - checkout: none
          - download: current
            artifact: dist
          - bash: |
              gzip -dc '$(Agent.BuildDirectory)'/dist/*.tar.gz |
              tar -x --strip-components=1
            displayName: Unpack
          - bash: |
              $CC --version
              $CXX --version
              ./configure --prefix='$(Build.BinariesDirectory)'
              status=$?
              echo "##vso[task.uploadfile]`pwd`/config.log"
              exit $status
            displayName: Configure
          - bash: |
              make check
            displayName: Build
          - bash: |
              make install &&
              make installcheck
            displayName: Install
  - stage: Release
    dependsOn: Default
    condition:
      and(succeeded(),
        startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    jobs:
      - job: UploadToBitbucket
        displayName: Upload to Bitbucket
        pool:
          vmImage: ubuntu-latest
        variables:
          - group: bitbucket
        steps:
          - download: current
            artifact: dist
          - bash: |
              sh ./upload.sh -u '$(bitbucket.username):$(bitbucket.password)' \
                -r '$(uploadRepository)' '$(Agent.BuildDirectory)'/dist/*
            displayName: Upload
